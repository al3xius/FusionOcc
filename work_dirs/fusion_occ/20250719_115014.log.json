{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3070\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.12.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.1\nMMSegmentation: 0.25.0\nMMDetection3D: 1.0.0rc4+f8f917b\nspconv2.0: False", "config": "point_cloud_range = [-40, -40, -1, 40, 40, 5.4]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDatasetOccpancy'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='PrepareImageSeg',\n        downsample=1,\n        is_train=True,\n        data_config=dict(\n            cams=[\n                'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n            ],\n            Ncams=6,\n            input_size=(512, 1408),\n            src_size=(900, 1600),\n            resize=(-0.06, 0.11),\n            rot=(-5.4, 5.4),\n            flip=True,\n            crop_h=(0.0, 0.0),\n            resize_test=0.0),\n        sequential=True,\n        img_seg_dir='data/nuscenes/imgseg/samples'),\n    dict(type='LoadOccGTFromFile'),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='FuseAdjacentSweeps',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(type='PointsLidar2Ego'),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-40, -40, -1, 40, 40, 5.4]),\n    dict(\n        type='LoadAnnotationsAll',\n        bda_aug_conf=dict(\n            rot_lim=(-0.0, 0.0),\n            scale_lim=(1.0, 1.0),\n            flip_dx_ratio=0.5,\n            flip_dy_ratio=0.5),\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        is_train=True),\n    dict(\n        type='PointToMultiViewDepth',\n        downsample=1,\n        grid_config=dict(\n            x=[-40, 40, 0.4],\n            y=[-40, 40, 0.4],\n            z=[-1, 5.4, 0.4],\n            depth=[1.0, 45.0, 0.5])),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='Collect3D',\n        keys=[\n            'img_inputs', 'points', 'sparse_depth', 'segs', 'voxel_semantics',\n            'mask_camera'\n        ])\n]\ntest_pipeline = [\n    dict(\n        type='PrepareImageSeg',\n        restore_upsample=8,\n        downsample=1,\n        data_config=dict(\n            cams=[\n                'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n            ],\n            Ncams=6,\n            input_size=(512, 1408),\n            src_size=(900, 1600),\n            resize=(-0.06, 0.11),\n            rot=(-5.4, 5.4),\n            flip=True,\n            crop_h=(0.0, 0.0),\n            resize_test=0.0),\n        sequential=True,\n        img_seg_dir='data/nuscenes/imgseg/samples'),\n    dict(type='LoadOccGTFromFile'),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='FuseAdjacentSweeps',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(type='PointsLidar2Ego'),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-40, -40, -1, 40, 40, 5.4]),\n    dict(\n        type='LoadAnnotationsAll',\n        bda_aug_conf=dict(\n            rot_lim=(-0.0, 0.0),\n            scale_lim=(1.0, 1.0),\n            flip_dx_ratio=0.5,\n            flip_dy_ratio=0.5),\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        is_train=False),\n    dict(\n        type='PointToMultiViewDepth',\n        downsample=1,\n        grid_config=dict(\n            x=[-40, 40, 0.4],\n            y=[-40, 40, 0.4],\n            z=[-1, 5.4, 0.4],\n            depth=[1.0, 45.0, 0.5])),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['img_inputs', 'points', 'sparse_depth'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='NuScenesDatasetOccpancy',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/fusionocc-nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='PrepareImageSeg',\n                downsample=1,\n                is_train=True,\n                data_config=dict(\n                    cams=[\n                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                    ],\n                    Ncams=6,\n                    input_size=(512, 1408),\n                    src_size=(900, 1600),\n                    resize=(-0.06, 0.11),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    crop_h=(0.0, 0.0),\n                    resize_test=0.0),\n                sequential=True,\n                img_seg_dir='data/nuscenes/imgseg/samples'),\n            dict(type='LoadOccGTFromFile'),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='FuseAdjacentSweeps',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(type='PointsLidar2Ego'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-40, -40, -1, 40, 40, 5.4]),\n            dict(\n                type='LoadAnnotationsAll',\n                bda_aug_conf=dict(\n                    rot_lim=(-0.0, 0.0),\n                    scale_lim=(1.0, 1.0),\n                    flip_dx_ratio=0.5,\n                    flip_dy_ratio=0.5),\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                is_train=True),\n            dict(\n                type='PointToMultiViewDepth',\n                downsample=1,\n                grid_config=dict(\n                    x=[-40, 40, 0.4],\n                    y=[-40, 40, 0.4],\n                    z=[-1, 5.4, 0.4],\n                    depth=[1.0, 45.0, 0.5])),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=[\n                    'img_inputs', 'points', 'sparse_depth', 'segs',\n                    'voxel_semantics', 'mask_camera'\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True,\n        use_mask=True,\n        stereo=False,\n        filter_empty_gt=False,\n        img_info_prototype='fusionocc',\n        multi_adj_frame_id_cfg=(1, 2, 1),\n        multi_adj_frame_id_cfg_lidar=(1, 8, 1)),\n    val=dict(\n        type='NuScenesDatasetOccpancy',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/fusionocc-nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='PrepareImageSeg',\n                restore_upsample=8,\n                downsample=1,\n                data_config=dict(\n                    cams=[\n                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                    ],\n                    Ncams=6,\n                    input_size=(512, 1408),\n                    src_size=(900, 1600),\n                    resize=(-0.06, 0.11),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    crop_h=(0.0, 0.0),\n                    resize_test=0.0),\n                sequential=True,\n                img_seg_dir='data/nuscenes/imgseg/samples'),\n            dict(type='LoadOccGTFromFile'),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='FuseAdjacentSweeps',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(type='PointsLidar2Ego'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-40, -40, -1, 40, 40, 5.4]),\n            dict(\n                type='LoadAnnotationsAll',\n                bda_aug_conf=dict(\n                    rot_lim=(-0.0, 0.0),\n                    scale_lim=(1.0, 1.0),\n                    flip_dx_ratio=0.5,\n                    flip_dy_ratio=0.5),\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                is_train=False),\n            dict(\n                type='PointToMultiViewDepth',\n                downsample=1,\n                grid_config=dict(\n                    x=[-40, 40, 0.4],\n                    y=[-40, 40, 0.4],\n                    z=[-1, 5.4, 0.4],\n                    depth=[1.0, 45.0, 0.5])),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img_inputs', 'points', 'sparse_depth'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        use_mask=True,\n        stereo=False,\n        filter_empty_gt=False,\n        img_info_prototype='fusionocc',\n        multi_adj_frame_id_cfg=(1, 2, 1),\n        multi_adj_frame_id_cfg_lidar=(1, 8, 1)),\n    test=dict(\n        type='NuScenesDatasetOccpancy',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/fusionocc-nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='PrepareImageSeg',\n                restore_upsample=8,\n                downsample=1,\n                data_config=dict(\n                    cams=[\n                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                    ],\n                    Ncams=6,\n                    input_size=(512, 1408),\n                    src_size=(900, 1600),\n                    resize=(-0.06, 0.11),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    crop_h=(0.0, 0.0),\n                    resize_test=0.0),\n                sequential=True,\n                img_seg_dir='data/nuscenes/imgseg/samples'),\n            dict(type='LoadOccGTFromFile'),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='FuseAdjacentSweeps',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(type='PointsLidar2Ego'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-40, -40, -1, 40, 40, 5.4]),\n            dict(\n                type='LoadAnnotationsAll',\n                bda_aug_conf=dict(\n                    rot_lim=(-0.0, 0.0),\n                    scale_lim=(1.0, 1.0),\n                    flip_dx_ratio=0.5,\n                    flip_dy_ratio=0.5),\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                is_train=False),\n            dict(\n                type='PointToMultiViewDepth',\n                downsample=1,\n                grid_config=dict(\n                    x=[-40, 40, 0.4],\n                    y=[-40, 40, 0.4],\n                    z=[-1, 5.4, 0.4],\n                    depth=[1.0, 45.0, 0.5])),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['img_inputs', 'points', 'sparse_depth'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        use_mask=True,\n        stereo=False,\n        filter_empty_gt=False,\n        img_info_prototype='fusionocc',\n        multi_adj_frame_id_cfg=(1, 2, 1),\n        multi_adj_frame_id_cfg_lidar=(1, 8, 1)))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='PrepareImageSeg',\n            restore_upsample=8,\n            downsample=1,\n            data_config=dict(\n                cams=[\n                    'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                    'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                ],\n                Ncams=6,\n                input_size=(512, 1408),\n                src_size=(900, 1600),\n                resize=(-0.06, 0.11),\n                rot=(-5.4, 5.4),\n                flip=True,\n                crop_h=(0.0, 0.0),\n                resize_test=0.0),\n            sequential=True,\n            img_seg_dir='data/nuscenes/imgseg/samples'),\n        dict(type='LoadOccGTFromFile'),\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='FuseAdjacentSweeps',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(type='PointsLidar2Ego'),\n        dict(\n            type='PointsRangeFilter',\n            point_cloud_range=[-40, -40, -1, 40, 40, 5.4]),\n        dict(\n            type='LoadAnnotationsAll',\n            bda_aug_conf=dict(\n                rot_lim=(-0.0, 0.0),\n                scale_lim=(1.0, 1.0),\n                flip_dx_ratio=0.5,\n                flip_dy_ratio=0.5),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            is_train=False),\n        dict(\n            type='PointToMultiViewDepth',\n            downsample=1,\n            grid_config=dict(\n                x=[-40, 40, 0.4],\n                y=[-40, 40, 0.4],\n                z=[-1, 5.4, 0.4],\n                depth=[1.0, 45.0, 0.5])),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1333, 800),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='Collect3D',\n                    keys=['img_inputs', 'points', 'sparse_depth'])\n            ])\n    ])\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/fusion_occ'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\ndata_config = dict(\n    cams=[\n        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT', 'CAM_BACK_LEFT',\n        'CAM_BACK', 'CAM_BACK_RIGHT'\n    ],\n    Ncams=6,\n    input_size=(512, 1408),\n    src_size=(900, 1600),\n    resize=(-0.06, 0.11),\n    rot=(-5.4, 5.4),\n    flip=True,\n    crop_h=(0.0, 0.0),\n    resize_test=0.0)\ngrid_config = dict(\n    x=[-40, 40, 0.4],\n    y=[-40, 40, 0.4],\n    z=[-1, 5.4, 0.4],\n    depth=[1.0, 45.0, 0.5])\nuse_mask = True\nvoxel_size = [0.05, 0.05, 0.05]\nimg_backbone_out_channel = 256\nfeature_channel = 32\nlidar_out_channel = 32\nimg_channels = 32\nnumC_Trans = 64\nnum_classes = 18\nmulti_adj_frame_id_cfg = (1, 2, 1)\nmulti_adj_frame_id_cfg_lidar = (1, 8, 1)\nmodel = dict(\n    type='FusionOCC',\n    lidar_in_channel=5,\n    point_cloud_range=[-40, -40, -1, 40, 40, 5.4],\n    voxel_size=[0.05, 0.05, 0.05],\n    lidar_out_channel=32,\n    align_after_view_transformation=True,\n    num_adj=1,\n    fuse_loss_weight=0.1,\n    img_backbone=dict(\n        type='SwinTransformer',\n        pretrain_img_size=224,\n        patch_size=4,\n        window_size=12,\n        mlp_ratio=4,\n        embed_dims=128,\n        depths=[2, 2, 18, 2],\n        num_heads=[4, 8, 16, 32],\n        strides=(4, 2, 2, 2),\n        out_indices=(2, 3),\n        qkv_bias=True,\n        qk_scale=None,\n        patch_norm=True,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.1,\n        use_abs_pos_embed=False,\n        return_stereo_feat=True,\n        act_cfg=dict(type='GELU'),\n        norm_cfg=dict(type='LN', requires_grad=True),\n        pretrain_style='official',\n        output_missing_index_as_none=False),\n    img_neck=dict(\n        type='FPN_LSS',\n        in_channels=1536,\n        out_channels=256,\n        extra_upsample=None,\n        input_feature_index=(0, 1),\n        scale_factor=2),\n    img_view_transformer=dict(\n        type='CrossModalLSS',\n        feature_channels=32,\n        seg_num_classes=18,\n        grid_config=dict(\n            x=[-40, 40, 0.4],\n            y=[-40, 40, 0.4],\n            z=[-1, 5.4, 0.4],\n            depth=[1.0, 45.0, 0.5]),\n        input_size=(512, 1408),\n        in_channels=256,\n        mid_channels=128,\n        depth_channels=88,\n        is_train=True,\n        out_channels=32,\n        sid=False,\n        collapse_z=False,\n        depthnet_cfg=dict(aspp_mid_channels=96),\n        downsample=16),\n    pre_process=dict(\n        type='CustomResNet3D',\n        numC_input=32,\n        with_cp=False,\n        num_layer=[1],\n        num_channels=[32],\n        stride=[1],\n        backbone_output_ids=[0]),\n    occ_encoder_backbone=dict(\n        type='CustomResNet3D',\n        numC_input=96,\n        num_layer=[1, 2, 3],\n        with_cp=False,\n        num_channels=[64, 128, 256],\n        stride=[1, 2, 2],\n        backbone_output_ids=[0, 1, 2]),\n    occ_encoder_neck=dict(type='LSSFPN3D', in_channels=448, out_channels=64),\n    out_dim=64,\n    loss_occ=dict(type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n    use_mask=True)\nimg_seg_dir = 'data/nuscenes/imgseg/samples'\nbda_aug_conf = dict(\n    rot_lim=(-0.0, 0.0),\n    scale_lim=(1.0, 1.0),\n    flip_dx_ratio=0.5,\n    flip_dy_ratio=0.5)\nshare_data_config = dict(\n    use_mask=True,\n    type='NuScenesDatasetOccpancy',\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    modality=dict(\n        use_lidar=False,\n        use_camera=True,\n        use_radar=False,\n        use_map=False,\n        use_external=False),\n    stereo=False,\n    filter_empty_gt=False,\n    img_info_prototype='fusionocc',\n    multi_adj_frame_id_cfg=(1, 2, 1),\n    multi_adj_frame_id_cfg_lidar=(1, 8, 1))\ntest_data_config = dict(\n    pipeline=[\n        dict(\n            type='PrepareImageSeg',\n            restore_upsample=8,\n            downsample=1,\n            data_config=dict(\n                cams=[\n                    'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                    'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                ],\n                Ncams=6,\n                input_size=(512, 1408),\n                src_size=(900, 1600),\n                resize=(-0.06, 0.11),\n                rot=(-5.4, 5.4),\n                flip=True,\n                crop_h=(0.0, 0.0),\n                resize_test=0.0),\n            sequential=True,\n            img_seg_dir='data/nuscenes/imgseg/samples'),\n        dict(type='LoadOccGTFromFile'),\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='FuseAdjacentSweeps',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(type='PointsLidar2Ego'),\n        dict(\n            type='PointsRangeFilter',\n            point_cloud_range=[-40, -40, -1, 40, 40, 5.4]),\n        dict(\n            type='LoadAnnotationsAll',\n            bda_aug_conf=dict(\n                rot_lim=(-0.0, 0.0),\n                scale_lim=(1.0, 1.0),\n                flip_dx_ratio=0.5,\n                flip_dy_ratio=0.5),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            is_train=False),\n        dict(\n            type='PointToMultiViewDepth',\n            downsample=1,\n            grid_config=dict(\n                x=[-40, 40, 0.4],\n                y=[-40, 40, 0.4],\n                z=[-1, 5.4, 0.4],\n                depth=[1.0, 45.0, 0.5])),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1333, 800),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='Collect3D',\n                    keys=['img_inputs', 'points', 'sparse_depth'])\n            ])\n    ],\n    ann_file='data/nuscenes/fusionocc-nuscenes_infos_val.pkl',\n    use_mask=True,\n    type='NuScenesDatasetOccpancy',\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    modality=dict(\n        use_lidar=False,\n        use_camera=True,\n        use_radar=False,\n        use_map=False,\n        use_external=False),\n    stereo=False,\n    filter_empty_gt=False,\n    img_info_prototype='fusionocc',\n    multi_adj_frame_id_cfg=(1, 2, 1),\n    multi_adj_frame_id_cfg_lidar=(1, 8, 1))\nkey = 'test'\noptimizer = dict(type='AdamW', lr=5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=5, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    min_lr_ratio=0.001)\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncustom_hooks = [\n    dict(type='MEGVIIEMAHook', init_updates=10560, priority='NORMAL'),\n    dict(type='SyncbnControlHook', syncbn_start_epoch=0)\n]\ngpu_ids = [0]\n", "seed": 0, "exp_name": "fusion_occ.py"}
